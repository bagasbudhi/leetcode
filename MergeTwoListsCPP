Leetcode Merge Linked List in C++, credit to Knockcat

Solution 1 : RECURSIVE APPROACH

Time Complexity O(n+m)
Space Complexity O(n+m) this is auxiliary stack space due to recursion.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if (list1==NULL) return list2;
        if (list2==NULL) return list1;

        if(list1->val <= list2->val){
            list1->next = mergeTwoLists(list1->next,list2);
            return list1;
        }
        else {
            list2 -> next = mergeTwoLists(list2->next,list1);
            return list2;
        }

    }
};

Solution 2 : ITERATIVE APPROACH

Time Complexity O(n+m)
Space Complexity O(1)

